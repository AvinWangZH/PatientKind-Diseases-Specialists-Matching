'''
This function uses files generated by other functions:
'author_omimID_mat_coo.p'   by OMIMScraping.py


'''
import pickle
import json
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.font_manager
from sklearn import svm
from collections import Counter

def get_author_list(training_dict):   
    
    author_list = []
    
    for i in training_dict:
        for j in training_dict[i]['authors']:
            if j not in author_list:
                author_list.append(j)
        
    return author_list    


def get_omimID_list(training_dict):
    
    omimID_list = []
    
    for i in training_dict:
        omimID_list.append(i)
        
    return omimID_list

def get_omimID_author_label(author_list, omimID_list, training_dict):
    #The first layer of matriz is label 0 or 1. 0 means not expert, 1 means expert
    
    mat = np.zeros((len(author_list), len(omimID_list)))
    
    for i in range(len(author_list)):
        for j in range(len(omimID_list)):
            if author_list[i] in training_dict[omimID_list[j]]['authors'].keys():
                mat[i][j] = 1
                
    return mat

def get_feature_mat(author_list, omimID_list, training_dict, author_omimID_full_mat):
    mat = np.zeros((len(author_list), len(omimID_list), 3))
    
    # Feature #1: number of publications of each author on each disease
    for i in range(len(author_list)):
        for j in range(len(omimID_list)):
            if author_list[i] in training_dict[omimID_list[j]]['authors'].keys():
                mat[i][j][0] = training_dict[omimID_list[j]]['authors'][author_list[i]]
    '''    
    for author_i, author in enumerate(author_list):
        for omim_i, omim_id in enumerate(omimID_list):
            pub_counts = training_dict[omim_id]['authors']
            if author in pub_counts:
                mat[author_i][omim_i][0] = pub_counts[author] 
    '''
    #Remove the duplicate names and redundant content
                
    # Feature #2: number of publications the author has in total
    for i in range(len(author_list)):
        print(i)
        author_index = full_author_list.index(author_list[i])
        mat[i][0][1] =  author_omimID_full_mat.getrow(author_index).sum()  
        
    for i in range(len(author_list)):
        for j in range(len(omimID_list)):
            mat[i][j][1] = mat[i][0][1]
            
    # Feature #3: number of disease the author published papers
    for i in range(len(author_list)):
        print(i)
        author_index = full_author_list.index(author_list[i])
        count = 0
        for j in author_omimID_full_mat.getrow(author_index).toarray()[0]:
            if j != 0:
                count += 1
        mat[i][0][2] = count
        
    for i in range(len(author_list)):
        for j in range(len(omimID_list)):
            mat[i][j][2] = mat[i][0][2]    
    
    
    return mat
              



def get_num_experts(mat):
    count = 0
    
    for i in range(mat.shape[0]):
        for j in range(mat[i].size):
            if mat[i][j] != 0: 
                count += 1    
    
    return count

            
            

#def get_training_data(training_dict, omim_dict):
    
    


if __name__ == '__main__':

    with open('disease_author_omimID_dict.json', 'r') as f1: #for gene review
        gene_review_full_dict = json.load(f1)
        
    with open('omim_dict_final.json', 'r') as f2:
        omim_dict = json.load(f2)    
    
    with open('training_dict.json', 'r') as f3:
        gene_review_training_dict = json.load(f3)
        
    with open('author_omimID_mat_coo.p', 'rb') as f4:
        author_omimID_full_mat = pickle.load(f4)
        
    with open('disease_list_for_learning.json', 'r') as f5:
        full_omimID_list = json.load(f5)    
    
    with open('author_list_for_learning.json', 'r') as f6:
        full_author_list = json.load(f6)    
    
    
    training_data_dict = {} #key: OMIM Ids, value: training data
    
    #count every authors publications in related OMIM ids
    for omim_id in gene_review_training_dict:
        full_author_list = []
        for pubmed_id in omim_dict[omim_id]['pubList']:
            full_author_list.extend(omim_dict[omim_id]['pubList'][pubmed_id]['authors'])
        
        full_author_pub_count = dict(Counter(full_author_list))
        
        training_data_dict[omim_id] = full_author_pub_count
    
    #start build features
    for omim_id in training_data_dict:
        for author in training_data_dict[omim_id]:
            training_data_dict[omim_id][author] = [training_data_dict[omim_id][author]]
    
    
    
    
            
    
        
    
        
            
    #author_list = get_author_list(training_dict)
    #omimID_list = get_omimID_list(training_dict)
    #mat_label = get_omimID_author_label(author_list, omimID_list, training_dict)
    #mat_feature = get_feature_mat(author_list, omimID_list, training_dict, author_omimID_full_mat)
    
    #author_omimID_mat = build_author_omimID_mat(author_list_omim, disease_list_omim)
    
        
    
